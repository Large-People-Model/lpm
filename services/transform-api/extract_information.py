from pymongo import MongoClient
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import MongoDBAtlasVectorSearch
from langchain.llms import OpenAI
from langchain.chains import RetrievalQA
import gradio as gr
from gradio.themes.base import Base
import key_param

client = MongoClient(key_param.MONGO_URI)
dbName = "langchain_demo"
collectionName = "collection_of_text_blobs"
collection = client[dbName][collectionName]

# Define the text embedding model
embeddings = OpenAIEmbeddings(openai_api_key=key_param.openai_api_key)

# Initialize the Vector Store
vectorStore = MongoDBAtlasVectorSearch(collection, embeddings)

def query_data(query):
    try:
        docs = vectorStore.similarity_search(query, K=1)
        if len(docs) > 0:
            print(docs[0])  # Log for debugging
            as_output = docs[0].page_content
        else:
            as_output = "No documents found"

        llm = OpenAI(openai_api_key=key_param.openai_api_key, temperature=0)
        retriever = vectorStore.as_retriever()
        qa = RetrievalQA.from_chain_type(llm, chain_type="stuff", retriever=retriever)

        retriever_output = qa.run(query)

        return as_output, retriever_output
    except Exception as e:
        print(f"An error occurred: {e}")  # Log the error
        return "Error in processing the query", "Error in processing the query"

# Create a web interface for the app, using Gradio
with gr.Blocks(theme=Base(), title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown("""
        # Question Answering App using Atlas Vector Search + RAG Architecture
        """)
    textbox = gr.Textbox(label="Enter your Question:")
    with gr.Row():
        button = gr.Button("Submit", variant="primary")
    with gr.Column():
        output1 = gr.Textbox(lines=1, max_lines=10, label="Output with just Atlas Vector Search (returns text field as is):")
        output2 = gr.Textbox(lines=1, max_lines=10, label="Output generated by chaining Atlas Vector Search to Langchain's RetrieverQA + OpenAI LLM:")

    button.click(query_data, textbox, outputs=[output1, output2])

demo.launch()